spring.application.name=dietiestatesbackend
server.port=${PORT:8080}

# disabling springboot security
security.basic.enable: false   
management.security.enabled: false  

# Disable default error pages
server.error.whitelabel.enabled=false
# error handling
spring.mvc.throw-exception-if-no-handler-found=true
spring.web.resources.add-mappings=false

# allow custom error messages
server.error.include-message=always
server.error.include-binding-errors=always

spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driverClassName=org.postgresql.Driver
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.format_sql=true

#! Disable Flyway migrations (temporary)
spring.flyway.enabled=false
spring.jpa.open-in-view=false
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.default_schema=dieti_estates

# HikariCP Connection Pool Configuration
# Prevent "Failed to validate connection" warnings and handle idle connections proactively

# 5 minutes - slightly less than typical database/firewall timeout
spring.datasource.hikari.max-lifetime=300000 
# 30 seconds - timeout for connection acquisition
spring.datasource.hikari.connection-timeout=30000 
# 1 minute - timeout for idle connections
spring.datasource.hikari.idle-timeout=60000
# Minimum number of idle connections
spring.datasource.hikari.minimum-idle=5
# 5 seconds - timeout for connection validation
spring.datasource.hikari.validation-timeout=5000
# 1 minute - detect connection leaks
spring.datasource.hikari.leak-detection-threshold=60000 

# Access token secret — prefer ACCESS_TOKEN_SECRET_KEY env var, fallback to JWT_SECRET for compatibility.
jwt.secret.access-token=${ACCESS_TOKEN_SECRET_KEY}
  
azure.storage.connection-string=${AZURE_STORAGE_CONNECTION_STRING}
azure.storage.container-name=${AZURE_CONTAINER_NAME}

spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

# Geoapify Configuration
geocoding.provider.geoapify.api-key=${GEOAPIFY_API_KEY}
geocoding.provider.geoapify.api-url=https://api.geoapify.com/v1/geocode
geocoding.provider.geoapify.places-api-url=https://api.geoapify.com/v2/places

# TODO adjust radius in un future if needed
geoapify.places.radius=5000
geoapify.places.categories=education,healthcare.hospital,public_transport,leisure.park

# ===================================================================
# LOGGING CONFIGURATION
# ===================================================================
# Livello di logging per il root logger
logging.level.root=INFO
logging.level.com.dieti.dietiestatesbackend=DEBUG
logging.level.org.springframework.security=DEBUG
logging.level.com.dieti.dietiestatesbackend.security.SecurityUtil=DEBUG

# Enable detailed Hibernate/JPA SQL logging for debugging property search
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.level.org.springframework.data.jpa=DEBUG
logging.level.org.springframework.data.jpa.repository.query=DEBUG

# Percorso del file di log
logging.file.name=logs/app.log

# Pattern per il logging su file con fuso orario Europe/Rome (UTC+2)
# Nota: Spring Boot usa il pattern di Logback. La conversione del fuso orario è gestita qui.
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss.SSS, Europe/Rome} [%thread] %-5level %logger{36} - %msg%n

# Pattern per il logging su console (mantenuto per l'output di sviluppo)
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS, Europe/Rome} [%thread] %-5level %logger{36} - %msg%n
# ===================================================================
# Externalized application-specific properties (moved from hardcoded values)
# ===================================================================
# Google OAuth client IDs (used by [`GoogleTokenValidator.java`](src/main/java/com/dieti/dietiestatesbackend/security/GoogleTokenValidator.java:16))
google.client.android-id=68500182941-q8cp0sg6nvpq4tpr3ct30invplj34ets.apps.googleusercontent.com
google.client.web-id=68500182941-19rccqu4iigg9mcj062rf3t9blgjg5h5.apps.googleusercontent.com

# Property images configuration (used by [`PropertyImageUtils.java`](src/main/java/com/dieti/dietiestatesbackend/util/PropertyImageUtils.java:17))
property.images.base-path=/data/resources/listings/
property.images.thumbnail-extension=.webp
property.images.thumbnail-prefix=01

# Access token configuration (secret should come from env var ACCESS_TOKEN_SECRET_KEY)
access.token.duration-ms=900000

# Image Storage Base URL (usato per costruire le risposte API)
storage.image.base-url=${STORAGE_IMAGE_URL}
storage.image.max-file-size-mb=5
storage.image.max-images-per-property=20
storage.image.allowed-types=image/webp

# Configurazione magic bytes per la validazione della sicurezza delle immagini
# Formato: contentType=magicBytesInHex (senza spazi, separati da virgola se multipli)
storage.image.magic-bytes.image/webp=52494646

# Overbooking thresholds (configurabili)
overbooking.max.same-property=3
overbooking.max.distinct-properties=2
# Owner cancellation cutoff (hours) - tempo minimo richiesto prima dell'inizio per permettere la cancellazione da parte dell'utente proprietario
cancellation.owner.cutoff-hours=24
# Application timezone (configurable)
app.timezone=Europe/Rome

# Email configuration
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${MAIL_USERNAME}
spring.mail.password=${MAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
